# uniswap-v4 

### 与v3的区别

对于v3，其框架是工厂/池的模式。新创建流动池是通过工厂合约创建一个新代币对的合约实例，相当于每个流动池
就是一个合约；每一步操作都是以一次代币转移作为结尾；

v4，使用的框架是Singleton（单例）合约模式，通过单个合约管理多个（所有）流动池；新引用了概念Flash Accounting
（闪电记账）；支持原生ETH；

### 单例模式

单例合约简化流动池的创建，并存储流动池的状态；  
之前每个池都是通过工厂合约作为新的智能合约部署，导致创建新池和对应操作的成本显著增加；  
单例合约模式将每个池都由单个合约同一管理（每个池都安置在PoolManager合约中），并存储每个池的状态，对应的
操作通过Flash Accounting处理,仅在结束时进行代币转移；

### Flash Accounting (闪电记账)

采用EIP-1153瞬态存储，将多个操作高效链接到单个交易中；瞬态存储类似于常规存储，但在每次交易结束时候清除，跟变量
的局部作用域大致一样吧；  
对于之前（v4之前）没有Flash Accounting，每一步操作都伴随着代币转移，消耗GAS费，失败回滚也一样消耗；添加了
Flash Accounting功能，进一步降低跨多个交易池的GAS成本。  

例如：用ETH兑换DAI，其需要的交易池是ETH<>USDT、USDT<>DAI(其中一个路径):  

v3:  
先将ETH转移到ETH<>USDT合约中；  
再将USDT从ETH<>USDT提取并转移到USDT<>DAI中；  
最终将DAI从USDT<>DAI提取并转移到用户账户中。  

v4:  
在ETH<>USDT上调用swap()；  
在USDT<>DAI上调用swap()，并将上一步得到的USDT作为输入金额；  
最后用户只需要支付ETH和接受DAI就行。  

对于v3来说，需要实际进行USDT转移；而v4并不需要将USDT实际转移，仅仅通过内部记账的方式，记录USDT的波动，在最后
结算时候才发生代币转移。

**总结**：v4通过使用Flash Accounting，每次更改余额的操作（兑换和流动性修改）都会更新内部净余额（delta）;只有在最后
的余额更改才需要代币转移。

### ERC-6909
开发人员可以将ERC20代币存入到PoolManager（合约）中，而不是选择将ERC20代币转入转出；作为交换，PoolManager会
铸造一个可以代表其索赔的ERC6909代币。在随后需要支付代币的过程中，无需将ERC20代币转入到PoolManager,仅需要销毁
用户自己所拥有的部分或全部的ERC6909代币，从而完成操作。  

因为转移代币过程需要调用外部智能合约，与内部记账相比会产生GAS开销；而这些智能合约会有些自己的自定义逻辑，这
也会产生GAS开销。因此对于这种机制能进一步节省GAS开销。

### Hooks
v4引入Hooks，允许开发人员对流动池各个阶段、操作前后进行自定义逻辑。  
- {before,after}Initialize —— 新池初始化前后
- {before,after}AddLiquidity —— 添加流动性前后
- {before,after}RemoveLiquidity —— 移除流动性前后
- {before,after}Swap —— 兑换前后
- {before,after}Donate —— 捐款前后
